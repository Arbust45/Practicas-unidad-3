from tkinter import *
from tkinter import messagebox
import mysql.connector
from tkinter import ttk
import re

# Conectar a la base de datos
try:
    
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="escuela"
    )
except mysql.connector.Error as e:
    
    messagebox.showerror("Error de conexión", f"No se pudo conectar a la base de datos: \n\nError{e}")
    exit()

# Crear la tabla de alumnos si no existe
cursor = db.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS alumnos (id INT AUTO_INCREMENT PRIMARY KEY, nombre VARCHAR(255), edad INT, email VARCHAR(255))")

# Función para leer todos los alumnos de la base de datos
def leer_alumnosDB():
    cursor = db.cursor()
    cursor.execute("SELECT * FROM alumnos")
    return cursor.fetchall()

# Función para agregar un nuevo alumno a la base de datos
def agregar_alumnoDB(id, nombre, edad, email):
    try:
        cursor = db.cursor()
        cursor.execute("INSERT INTO alumnos (id,nombre, edad, email) VALUES (%s,%s, %s, %s)", (id, nombre, edad, email))
        db.commit()
    except mysql.connector.Error as error :
        messagebox.showerror("Error al agregar el alumno", f"No se pudo agregar el alumno: {error}")
    finally:
        cursor.close()

# Función para actualizar un alumno existente en la base de datos
def actualizar_alumnoDB(id, nombre, edad, email):
    try:
        iid = int(id)
        cursor = db.cursor()
        cursor.execute("UPDATE alumnos SET nombre = %s, edad = %s, email = %s WHERE id = %s", (nombre, edad, email, iid))
        db.commit()
    except:
        messagebox.showerror(title="Error de variables",message="Datos ingresados no esperados")

# Función para eliminar un alumno existente de la base de datos
def eliminar_alumnoDB(id):
    cursor = db.cursor()
    cursor.execute("DELETE FROM alumnos WHERE id = %s", (id,))
    db.commit()


# Función para agregar un nuevo alumno
def agregar_alumno():
    
    form="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    
    # Obtener los datos del nuevo alumno
    try:
        nombre = entrada_nombre.get()
        edad = int(entrada_edad.get())
        email = entrada_email.get()
        id = int(entrada_id.get())
        
        # Validar que los campos no estén vacíos
        if not id or not nombre or not edad or not email:
            messagebox.showerror("Error al agregar el alumno", "Por favor ingrese todos los datos del alumno")
            return
        if not re.match(form, email):
            messagebox.showerror("Error", "El correo electrónico no tiene un formato válido")
            return
        # Agregar el nuevo alumno
        agregar_alumnoDB(id,nombre, edad, email)
    except ValueError as error:
        messagebox.showerror(title="Error de valores",message="Error:\n"+str(error)+"\n\nEl alumno no pudo ser agregado")
        
    # Limpiar los campos de entrada
    entrada_id.delete(0,END)
    entrada_nombre.delete(0, END)
    entrada_edad.delete(0, END)
    entrada_email.delete(0, END)


# Función para actualizar un alumno existente
def actualizar_alumno():
    
    form="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    try:
        # Obtener los datos del alumno a actualizar
        nombre = entrada_nombre.get()
        edad = entrada_edad.get()
        email = entrada_email.get()
        id = entrada_id.get()

        # Validar que los campos no estén vacíos
        if not id or not nombre or not edad or not email:
            messagebox.showerror("Error al actualizar el alumno", "Por favor ingrese todos los datos del alumno")
            return
        if not re.match(form, email):
            messagebox.showerror("Error", "El correo electrónico no tiene un formato válido")
            return
        # Actualizar el alumno
        actualizar_alumnoDB(id, nombre, edad, email)
        
    except ValueError as error:
        messagebox.showerror(title="Error de valores",message="Error:\n"+str(error)+"\n\nEl alumno no pudo ser actualizado\ndebido a un error al ingresar\nlos valores")
        

    # Limpiar los campos de entrada
    entrada_id.delete(0, END)
    entrada_nombre.delete(0, END)
    entrada_edad.delete(0, END)
    entrada_email.delete(0, END)

# Función para eliminar un alumno existente
def eliminar_alumno():
    try:
        # Obtener el ID del alumno a eliminar
        id = int(entrada_id.get())

        # Validar que se haya ingresado un ID
        if not id:
            messagebox.showerror("Error al eliminar el alumno", "Por favor ingrese el ID del alumno a eliminar")
            return

        # Preguntar al usuario si está seguro de eliminar el alumno
        confirmar = messagebox.askyesno("Confirmar eliminación", "¿Está seguro de eliminar este alumno?")

        if confirmar:
            # Eliminar el alumno
            eliminar_alumnoDB(id)
    
    except ValueError as error:
        messagebox.showerror(title="Error de valores",message="Error:\n"+str(error)+"\n\nNo se pudo identificar un id valido")
        
        # Limpiar los campos de entrada
        entrada_id.delete(0, END)
        entrada_nombre.delete(0, END)
        entrada_edad.delete(0, END)
        entrada_email.delete(0, END)




# Crear la ventana principal
def ventana_reg():
    def tabl():
        def cerrar():
            tab.withdraw()
            
        tab=Tk()
        tab.config(bg="coral")
        tab.title("Alumnos registrados")
        tab.resizable(0,0)
        
        vacio=Label(tab,text=" ",bg="coral")
        vacio.pack()
        
        tabla=ttk.Treeview(tab)
        tabla["columns"]=('ID','NOMBRE','EDAD','E-MAIL')
                
        tabla.column('#0', width=0, stretch=False)
        tabla.column('ID',anchor=CENTER,width=100)
        tabla.column('NOMBRE',anchor=CENTER,width=100)
        tabla.column('EDAD',anchor=CENTER,width=100)
        tabla.column('E-MAIL',anchor=CENTER,width=100)
                
        tabla.heading('#0', text='', anchor=CENTER)
        tabla.heading('ID', text='ID', anchor=CENTER)
        tabla.heading('NOMBRE', text='NOMBRE', anchor=CENTER)
        tabla.heading('EDAD', text='EDAD', anchor=CENTER)
        tabla.heading('E-MAIL', text='E-MAIL', anchor=CENTER)
                
        cursor.execute("SELECT * FROM `alumnos`")
        si = cursor.fetchall()

        for datos in si:
            tabla.insert(parent='', index='end', iid=datos[0], values=(datos[0], datos[1], datos[2], datos[3]))
        tabla.pack()
        
        botoncito=Button(tab,text="cerrar",command=cerrar,font="Monaco")
        botoncito.pack()

    def retu():
        ventana.withdraw()
        principal()
        
    # Mostrar la lista de alumnos en la tabla
    global ventana
    global entrada_id
    global entrada_email
    global entrada_nombre
    global entrada_edad

    ventana = Tk()
    ventana.config(bg="teal")
    ventana.title("Modificar datos")
    ventana.resizable(0,0)

    # Crear los campos de entrada para los datos del alumno
    Label(ventana, text="Id:",bg="teal",font="Monaco").grid(row=0, column=0, padx=5, pady=5)
    entrada_id = Entry(ventana,font="Monaco")
    entrada_id.grid(row=0, column=1, padx=5, pady=5)

    Label(ventana, text="Nombre:",bg="teal",font="Monaco").grid(row=1, column=0, padx=5, pady=5)
    entrada_nombre = Entry(ventana,font="Monaco")
    entrada_nombre.grid(row=1, column=1, padx=5, pady=5)

    Label(ventana, text="Edad:",bg="teal",font="Monaco").grid(row=2, column=0, padx=5, pady=5)
    entrada_edad = Entry(ventana,font="Monaco")
    entrada_edad.grid(row=2, column=1, padx=5, pady=5)

    Label(ventana, text="Email:",bg="teal",font="Monaco").grid(row=3, column=0, padx=5, pady=5)
    entrada_email = Entry(ventana,font="Monaco")
    entrada_email.grid(row=3, column=1, padx=5, pady=5)

    # Crear los botones para agregar, actualizar y eliminar alumnos
    Button(ventana, text="Agregar alumno", command=agregar_alumno,bg="light blue",font="Monaco").grid(row=0, column=2, padx=5, pady=5)
    Button(ventana, text="Actualizar alumno", command=actualizar_alumno,bg="light blue",font="Monaco").grid(row=1, column=2, padx=5, pady=5)
    Button(ventana, text="Eliminar alumno", command=eliminar_alumno,bg="light blue",font="Monaco").grid(row=2, column=2, padx=5, pady=5)
    Button(ventana, text="Mostrar alumnos", command=tabl,bg="light blue",font="Monaco").grid(row=3,column=2,padx=5,pady=5)
    Button(ventana,text="Volver",bg="light blue",font="Monaco",command=retu).grid(row=4,column=2,padx=5,pady=5)

def comprobar():
    try:
        Nombre=Nomb.get()
        id=int(iid.get())
        if Nombre == "Arbust" and id == int("1456"):
            ven.withdraw()
            ventana_reg()
        else:
            a="SELECT * FROM `alumnos` WHERE id=%s and nombre=%s"
            b=(id, Nombre)
            cursor.execute(a,b)
            resultado=cursor.fetchall()
            if not resultado:
                messagebox.showerror(title="ALUMNO NO ENCONTRADO",message="LOS DATOS DEL ALUMNO INGRESADO SON INCORRECTOS O EL ALUMNO NO ESTA REGISTRADO")
            else:
                ven.withdraw()
                def Actu():

                    def actualizar_alumno2():
                    # Obtener los datos del alumno a actualizar
                        try:
                            nombre = Nomb.get()
                            edad = int(ed.get())
                            email = corre.get()
                            id = int(iid.get())

                            # Validar que los campos no estén vacíos
                            if  not nombre or not edad or not email:
                                messagebox.showerror("Error al actualizar el alumno", "Por favor ingrese todos los datos del alumno")
                                return

                            elif not re.match(r"[^@]+@[^@]+\.[^@]+", email):
                                messagebox.showerror("Error al actualizar el alumno", "Por favor ingrese una dirección de correo electrónico válida")
                                return
                            else:
                                # Actualizar el alumno
                                actualizar_alumnoDB(id, nombre, edad, email)
                            
                            g.withdraw()
                            messagebox.showinfo(title="Estado",message="Actualizacion de datos exitosa\nPorfavor inicie sesion nuevamente")
                            principal()
                        except ValueError as error:
                            messagebox.showerror(title="Error de valores",message="Sus datos no pudieron ser actualizados\npor el error:"+str(error))

                    def vol():
                        g.withdraw()
                        comprobar()

                    ventanita.withdraw()

                    g=Tk()
                    g.config(bg="purple")
                    g.title("Actualizar datos")
                    g.geometry("275x300")
                    g.resizable(0,0)
                    
                    Text1=Label(g,text="Ingrese su nombre",font="Monaco",bg="purple",fg="white")
                    Text1.pack()

                    Nomb=Entry(g,font="Monaco")
                    Nomb.pack()
                    
                    Text2_5=Label(g,text="edad",font="Monaco",bg="purple",fg="white")
                    Text2_5.pack()
                    
                    ed=Entry(g,font="Monaco")
                    ed.pack()
                    
                    Text3_5=Label(g,text="email",font="Monaco",bg="purple",fg="white")
                    Text3_5.pack()
                    
                    corre=Entry(g,font="Monaco")
                    corre.pack()
                    
                    Text4=Label(g,text=" ",bg="purple",fg="white")
                    Text4.pack()

                    boton=Button(g,text="Ingresar",command=actualizar_alumno2,font="Monaco")
                    boton.pack()
                    
                    boton2=Button(g,text="volver",command=vol,font="Monaco")
                    boton2.pack()

                def volver():
                    ventanita.withdraw()
                    principal()
                        
                ven.withdraw()
                
                ventanita=Tk()
                ventanita.config(bg="chocolate")
                ventanita.title("Datos registrados")
                ventanita.resizable(0,0)
                
                Text6=Label(ventanita,text="BIENVENIDO "+Nombre,bg="chocolate",font="Monaco")
                Text6.pack()
                
                tabla=ttk.Treeview(ventanita)
                tabla["columns"]=('ID','NOMBRE','EDAD','E-MAIL')
                
                tabla.column('#0', width=0, stretch=False)
                tabla.column('ID',anchor=CENTER,width=100)
                tabla.column('NOMBRE',anchor=CENTER,width=100)
                tabla.column('EDAD',anchor=CENTER,width=100)
                tabla.column('E-MAIL',anchor=CENTER,width=100)
                
                tabla.heading('#0', text='', anchor=CENTER)
                tabla.heading('ID', text='ID', anchor=CENTER)
                tabla.heading('NOMBRE', text='NOMBRE', anchor=CENTER)
                tabla.heading('EDAD', text='EDAD', anchor=CENTER)
                tabla.heading('E-MAIL', text='E-MAIL', anchor=CENTER)

                cursor.execute(a, b)
                si = cursor.fetchall()

                for datos in si:
                    tabla.insert(parent='', index='end', iid=datos[0], values=(datos[0], datos[1], datos[2], datos[3]))
                tabla.pack()
                
                boton2=Button(ventanita,bg="white",text="Actualizar datos",command=Actu,font="Monaco")
                boton2.pack()
                boton3=Button(ventanita,font="Monaco",text="volver",command=volver)
                boton3.pack()

    except ValueError as error:
        messagebox.showerror(title="Error de datos",message="El formato del id ingresado no es valido\nfavor de ingresar numeros\nerror:"+str(error))
        iid.delete(0,END)

def principal():
    global Nomb
    global iid
    global ven

    def cerrar():
        ven.quit()

    ven=Tk()
    ven.title("Sistema de registro")
    ven.config(bg="light green")
    ven.geometry("285x201")
    ven.resizable(0,0)

    Text1=Label(ven,text="Ingrese su nombre",bg="light green",font="Monaco")
    Text1.pack()

    Nomb=Entry(ven,font="Monaco")
    Nomb.pack()

    Text3=Label(ven,text="Ingrese su id",bg="light green",font="Monaco")
    Text3.pack()

    iid=Entry(ven,show="*",font="Monaco")
    iid.pack()

    Text4=Label(ven,text=" ",bg="light green")
    Text4.pack()

    boton=Button(ven,text="Ingresar",command=comprobar,bg="green",font="Monaco")
    boton.pack()
    
    boton2=Button(ven,text="Cerrar",command=cerrar,bg="green",font="Monaco")
    boton2.pack()
    
    ven.mainloop()
    
principal()
