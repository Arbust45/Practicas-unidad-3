from tkinter import *
from tkinter import messagebox
import mysql.connector
from tkinter import ttk
import re

# Conectar a la base de datos
try:
    
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="escuela"
    )
except mysql.connector.Error as e:
    
    messagebox.showerror("Error de conexión", f"No se pudo conectar a la base de datos: \n\nError{e}")
    exit()

# Crear la tabla de alumnos si no existe
cursor = db.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS alumnos (id INT AUTO_INCREMENT PRIMARY KEY, nombre VARCHAR(255), edad INT, email VARCHAR(255))")

# Función para leer todos los alumnos de la base de datos
def leer_alumnosDB():
    cursor = db.cursor()
    cursor.execute("SELECT * FROM alumnos")
    return cursor.fetchall()

# Función para agregar un nuevo alumno a la base de datos
def agregar_alumnoDB(nombre, edad, email):
    try:
        cursor = db.cursor()
        cursor.execute("INSERT INTO alumnos (nombre, edad, email) VALUES (%s, %s, %s)", (nombre, edad, email))
        db.commit()
    except mysql.connector.Error as error:
        messagebox.showerror("Error al agregar el alumno", f"No se pudo agregar el alumno: {error}")
    finally:
        cursor.close()

# Función para actualizar un alumno existente en la base de datos
def actualizar_alumnoDB(id, nombre, edad, email):
    try:
        iid = int(id)
        cursor = db.cursor()
        cursor.execute("UPDATE alumnos SET nombre = %s, edad = %s, email = %s WHERE id = %s", (nombre, edad, email, iid))
        db.commit()
    except:
        messagebox.showerror(title="Error de variables",message="Datos ingresados no esperados")

# Función para eliminar un alumno existente de la base de datos
def eliminar_alumnoDB(id):
    cursor = db.cursor()
    cursor.execute("DELETE FROM alumnos WHERE id = %s", (id,))
    db.commit()


# Función para agregar un nuevo alumno
def agregar_alumno():
    
    form="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    # Obtener los datos del nuevo alumno
    nombre = entrada_nombre.get()
    edad = entrada_edad.get()
    email = entrada_email.get()

    # Validar que los campos no estén vacíos
    if not nombre or not edad or not email:
        messagebox.showerror("Error al agregar el alumno", "Por favor ingrese todos los datos del alumno")
        return
    if not re.match(form, email):
        messagebox.showerror("Error", "El correo electrónico no tiene un formato válido")
        return
    # Agregar el nuevo alumno
    agregar_alumnoDB(nombre, edad, email)

    # Limpiar los campos de entrada
    entrada_nombre.delete(0, END)
    entrada_edad.delete(0, END)
    entrada_email.delete(0, END)


# Función para actualizar un alumno existente
def actualizar_alumno():
    
    form="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    
    # Obtener los datos del alumno a actualizar
    nombre = entrada_nombre.get()
    edad = entrada_edad.get()
    email = entrada_email.get()
    id = entrada_id.get()

    # Validar que los campos no estén vacíos
    if not id or not nombre or not edad or not email:
        messagebox.showerror("Error al actualizar el alumno", "Por favor ingrese todos los datos del alumno")
        return
    if not re.match(form, email):
        messagebox.showerror("Error", "El correo electrónico no tiene un formato válido")
        return
    # Actualizar el alumno
    actualizar_alumnoDB(id, nombre, edad, email)

    # Limpiar los campos de entrada
    entrada_id.delete(0, END)
    entrada_nombre.delete(0, END)
    entrada_edad.delete(0, END)
    entrada_email.delete(0, END)





# Función para eliminar un alumno existente
def eliminar_alumno():
    # Obtener el ID del alumno a eliminar
    id = entrada_id.get()

    # Validar que se haya ingresado un ID
    if not id:
        messagebox.showerror("Error al eliminar el alumno", "Por favor ingrese el ID del alumno a eliminar")
        return

    # Preguntar al usuario si está seguro de eliminar el alumno
    confirmar = messagebox.askyesno("Confirmar eliminación", "¿Está seguro de eliminar este alumno?")

    if confirmar:
        # Eliminar el alumno
        eliminar_alumnoDB(id)

        # Limpiar los campos de entrada
        entrada_id.delete(0, END)
        entrada_nombre.delete(0, END)
        entrada_edad.delete(0, END)
        entrada_email.delete(0, END)




# Crear la ventana principal
def ventana_reg():
    def tabl():
        def cerrar():
            tab.withdraw()
            
        tab=Tk()
        
        tabla=ttk.Treeview(tab)
        tabla["columns"]=('ID','NOMBRE','EDAD','E-MAIL')
                
        tabla.column('#0', width=0, stretch=False)
        tabla.column('ID',anchor=CENTER,width=100)
        tabla.column('NOMBRE',anchor=CENTER,width=100)
        tabla.column('EDAD',anchor=CENTER,width=100)
        tabla.column('E-MAIL',anchor=CENTER,width=100)
                
        tabla.heading('#0', text='', anchor=CENTER)
        tabla.heading('ID', text='ID', anchor=CENTER)
        tabla.heading('NOMBRE', text='NOMBRE', anchor=CENTER)
        tabla.heading('EDAD', text='EDAD', anchor=CENTER)
        tabla.heading('E-MAIL', text='E-MAIL', anchor=CENTER)
                
        cursor.execute("SELECT * FROM `alumnos`")
        si = cursor.fetchall()

        for datos in si:
            tabla.insert(parent='', index='end', iid=datos[0], values=(datos[0], datos[1], datos[2], datos[3]))
        tabla.pack()
        
        botoncito=Button(tab,text="cerrar",command=cerrar)
        botoncito.pack()

            
    # Mostrar la lista de alumnos en la tabla
    global ventana
    global entrada_id
    global entrada_email
    global entrada_nombre
    global entrada_edad

    ventana = Tk()
    ventana.config(bg="teal")
    ventana.title("Modificar datos")

    # Crear los campos de entrada para los datos del alumno
    Label(ventana, text="Id:",bg="teal").grid(row=0, column=0, padx=5, pady=5)
    entrada_id = Entry(ventana)
    entrada_id.grid(row=0, column=1, padx=5, pady=5)

    Label(ventana, text="Nombre:",bg="teal").grid(row=1, column=0, padx=5, pady=5)
    entrada_nombre = Entry(ventana)
    entrada_nombre.grid(row=1, column=1, padx=5, pady=5)

    Label(ventana, text="Edad:",bg="teal").grid(row=2, column=0, padx=5, pady=5)
    entrada_edad = Entry(ventana)
    entrada_edad.grid(row=2, column=1, padx=5, pady=5)

    Label(ventana, text="Email:",bg="teal").grid(row=3, column=0, padx=5, pady=5)
    entrada_email = Entry(ventana)
    entrada_email.grid(row=3, column=1, padx=5, pady=5)

    # Crear los botones para agregar, actualizar y eliminar alumnos
    Button(ventana, text="Agregar alumno", command=agregar_alumno,bg="light blue").grid(row=0, column=2, padx=5, pady=5)
    Button(ventana, text="Actualizar alumno", command=actualizar_alumno,bg="light blue").grid(row=1, column=2, padx=5, pady=5)
    Button(ventana, text="Eliminar alumno", command=eliminar_alumno,bg="light blue").grid(row=2, column=2, padx=5, pady=5)
    Button(ventana, text="Mostrar alumnos", command=tabl,bg="light blue").grid(row=3,column=2,padx=5,pady=5)



def comprobar():
    Nombre=Nomb.get()
    id=iid.get()
    if Nombre == "Arbust" and id == "1456":
        ven.withdraw()
        ventana_reg()
    else:
        a="SELECT * FROM `alumnos` WHERE id=%s and nombre=%s"
        b=(id, Nombre)
        cursor.execute(a,b)
        resultado=cursor.fetchall()
        if not resultado:
            messagebox.showerror(title="ALUMNO NO ENCONTRADO",message="LOS DATOS DEL ALUMNO INGRESADO SON INCORRECTOS O EL ALUMNO NO ESTA REGISTRADO")
        else:
            ven.withdraw()
            def Actu():
                def actualizar_alumno2():
                # Obtener los datos del alumno a actualizar
                    nombre = Nomb.get()
                    edad = ed.get()
                    email = corre.get()
                    id = iid.get()

                    # Validar que los campos no estén vacíos
                    if not id or not nombre or not edad or not email:
                        messagebox.showerror("Error al actualizar el alumno", "Por favor ingrese todos los datos del alumno")
                        return
                    
                    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
                        messagebox.showerror("Error al actualizar el alumno", "Por favor ingrese una dirección de correo electrónico válida")
                        return
                    # Actualizar el alumno
                    actualizar_alumnoDB(id, nombre, edad, email)

                    # Limpiar los campos de entrada
                    iid.delete(0, END)
                    Nomb.delete(0, END)
                    ed.delete(0, END)
                    corre.delete(0, END)
                    g.withdraw()
                    comprobar()
                ventanita.withdraw()
                g=Tk()
                
                Text3=Label(g,text="Ingrese su id")
                Text3.pack()
                
                iid=Entry(g)
                iid.pack()
                
                Text2=Label(g,text=" ")
                Text2.pack()
                
                Text1=Label(g,text="Ingrese su nombre")
                Text1.pack()

                Nomb=Entry(g)
                Nomb.pack()
                
                Text2_5=Label(g,text="edad")
                Text2_5.pack()
                
                ed=Entry(g)
                ed.pack()
                
                Text3_5=Label(g,text="email")
                Text3_5.pack()
                
                corre=Entry(g)
                corre.pack()
                
                Text4=Label(g,text=" ")
                Text4.pack()

                boton=Button(g,text="Ingresar",command=actualizar_alumno2,)
                boton.pack()

        
            ven.withdraw()
            
            ventanita=Tk()
            ventanita.config(bg="chocolate")
            
            Text6=Label(ventanita,text="BIENVENIDO "+Nombre,bg="chocolate")
            Text6.pack()
            
            tabla=ttk.Treeview(ventanita)
            tabla["columns"]=('ID','NOMBRE','EDAD','E-MAIL')
            
            tabla.column('#0', width=0, stretch=False)
            tabla.column('ID',anchor=CENTER,width=100)
            tabla.column('NOMBRE',anchor=CENTER,width=100)
            tabla.column('EDAD',anchor=CENTER,width=100)
            tabla.column('E-MAIL',anchor=CENTER,width=100)
            
            tabla.heading('#0', text='', anchor=CENTER)
            tabla.heading('ID', text='ID', anchor=CENTER)
            tabla.heading('NOMBRE', text='NOMBRE', anchor=CENTER)
            tabla.heading('EDAD', text='EDAD', anchor=CENTER)
            tabla.heading('E-MAIL', text='E-MAIL', anchor=CENTER)
            
            cursor.execute(a, b)
            si = cursor.fetchall()

            for datos in si:
                tabla.insert(parent='', index='end', iid=datos[0], values=(datos[0], datos[1], datos[2], datos[3]))
            tabla.pack()
            
            boton2=Button(ventanita,bg="white",text="Actualizar datos",command=Actu)
            boton2.pack()


ven=Tk()
ven.title("Sistema de registro")

Text1=Label(ven,text="Ingrese su nombre")
Text1.pack()

Nomb=Entry(ven)
Nomb.pack()

Text2=Label(ven,text=" ")
Text2.pack()

Text3=Label(ven,text="Ingrese su id")
Text3.pack()

iid=Entry()
iid.pack()

Text4=Label(ven,text=" ")
Text4.pack()

boton=Button(ven,text="Ingresar",command=comprobar)
boton.pack()

ven.mainloop()
